Description:
  Neha Server

Parameters:
  EnvironmentName:
    Description: will be prefixed to resources
    Type: String

#Security groups are tied to resources and not to subnets
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http to our load balancer"
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-LBSecurityGroup"

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our hosts and SSH from local only
      #container where you will deploy sec-grp
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCID"
      #defines where inboud traffic will go    
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      #defines where outbound traffic will go, for updates/patches
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebserverSecGroup"

#Autosclaing: creates servers based on criterion and provide it a launh configuration
#launch config tells secgrp WHAT you want to launch
#scaling policy tells WHEN to launch

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      #what you run  
      ImageId: ami-06f2f779464715dc5  
      #ImageId: ami-005bdb005fb00e791
      #IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      #to have shh key for trouble shotting, use KeyName attribute
      #attach this to a web secgrp
      SecurityGroups:
      - Ref: WebServerSecGroup
      #which type of machine
      InstanceType: t3.small
      #HD space this machine will take in GB and where it is placed
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

#components to include a LB: Targetgrp, listener, ALBlistener rule   
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
#App LB
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

#if responses are healthy, LB will send traffic to this instance of autosclaing grp, if not, destroy it and sclare servers if needed
  #listener
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      #HealthCheckEnabled: Boolean
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      #HealthCheckPort: String
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      # Matcher: 
      #   Matcher
      # Name: String
      #go to port 8080 of the instance of autoscalinggrp and check http response
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-TargetGroup" 
      # TargetGroupAttributes: 
      #   - TargetGroupAttribute
      # TargetType: String
      # Targets: 
      #   - TargetDescription
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"